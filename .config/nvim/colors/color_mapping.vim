
function! Highlight(name, fg, ...)
	if &termguicolors 
		let fg = ' guifg='
		let bg = ' guibg='
		let style = ' gui='
	else
		let fg = ' ctermfg='
		let bg = ' ctermbg='
		let style = ' cterm='
	endif

	let command = 'hi ' . a:name . fg . a:fg 
	if a:0
		let command .= bg . a:1 
		if a:0 >= 2
			let command .= style . a:2
		endif
	endif
	exe command
endfunc

let cterm_color_table = [ 
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [999, 999, 999],
	\ [  0,   0,   0],
	\ [  0,   0,  95],
	\ [  0,   0, 135],
	\ [  0,   0, 175],
	\ [  0,   0, 215],
	\ [  0,   0, 255],
	\ [  0,  95,   0],
	\ [  0,  95,  95],
	\ [  0,  95, 135],
	\ [  0,  95, 175],
	\ [  0,  95, 215],
	\ [  0,  95, 255],
	\ [  0, 135,   0],
	\ [  0, 135,  95],
	\ [  0, 135, 135],
	\ [  0, 135, 175],
	\ [  0, 135, 215],
	\ [  0, 135, 255],
	\ [  0, 175,   0],
	\ [  0, 175,  95],
	\ [  0, 175, 135],
	\ [  0, 175, 175],
	\ [  0, 175, 215],
	\ [  0, 175, 255],
	\ [  0, 215,   0],
	\ [  0, 215,  95],
	\ [  0, 215, 135],
	\ [  0, 215, 175],
	\ [  0, 215, 215],
	\ [  0, 215, 255],
	\ [  0, 255,   0],
	\ [  0, 255,  95],
	\ [  0, 255, 135],
	\ [  0, 255, 175],
	\ [  0, 255, 215],
	\ [  0, 255, 255],
	\ [ 95,   0,   0],
	\ [ 95,   0,  95],
	\ [ 95,   0, 135],
	\ [ 95,   0, 175],
	\ [ 95,   0, 215],
	\ [ 95,   0, 255],
	\ [ 95,  95,   0],
	\ [ 95,  95,  95],
	\ [ 95,  95, 135],
	\ [ 95,  95, 175],
	\ [ 95,  95, 215],
	\ [ 95,  95, 255],
	\ [ 95, 135,   0],
	\ [ 95, 135,  95],
	\ [ 95, 135, 135],
	\ [ 95, 135, 175],
	\ [ 95, 135, 215],
	\ [ 95, 135, 255],
	\ [ 95, 175,   0],
	\ [ 95, 175,  95],
	\ [ 95, 175, 135],
	\ [ 95, 175, 175],
	\ [ 95, 175, 215],
	\ [ 95, 175, 255],
	\ [ 95, 215,   0],
	\ [ 95, 215,  95],
	\ [ 95, 215, 135],
	\ [ 95, 215, 175],
	\ [ 95, 215, 215],
	\ [ 95, 215, 255],
	\ [ 95, 255,   0],
	\ [ 95, 255,  95],
	\ [ 95, 255, 135],
	\ [ 95, 255, 175],
	\ [ 95, 255, 215],
	\ [ 95, 255, 255],
	\ [135,   0,   0],
	\ [135,   0,  95],
	\ [135,   0, 135],
	\ [135,   0, 175],
	\ [135,   0, 215],
	\ [135,   0, 255],
	\ [135,  95,   0],
	\ [135,  95,  95],
	\ [135,  95, 135],
	\ [135,  95, 175],
	\ [135,  95, 215],
	\ [135,  95, 255],
	\ [135, 135,   0],
	\ [135, 135,  95],
	\ [135, 135, 135],
	\ [135, 135, 175],
	\ [135, 135, 215],
	\ [135, 135, 255],
	\ [135, 175,   0],
	\ [135, 175,  95],
	\ [135, 175, 135],
	\ [135, 175, 175],
	\ [135, 175, 215],
	\ [135, 175, 255],
	\ [135, 215,   0],
	\ [135, 215,  95],
	\ [135, 215, 135],
	\ [135, 215, 175],
	\ [135, 215, 215],
	\ [135, 215, 255],
	\ [135, 255,   0],
	\ [135, 255,  95],
	\ [135, 255, 135],
	\ [135, 255, 175],
	\ [135, 255, 215],
	\ [135, 255, 255],
	\ [175,   0,   0],
	\ [175,   0,  95],
	\ [175,   0, 135],
	\ [175,   0, 175],
	\ [175,   0, 215],
	\ [175,   0, 255],
	\ [175,  95,   0],
	\ [175,  95,  95],
	\ [175,  95, 135],
	\ [175,  95, 175],
	\ [175,  95, 215],
	\ [175,  95, 255],
	\ [175, 135,   0],
	\ [175, 135,  95],
	\ [175, 135, 135],
	\ [175, 135, 175],
	\ [175, 135, 215],
	\ [175, 135, 255],
	\ [175, 175,   0],
	\ [175, 175,  95],
	\ [175, 175, 135],
	\ [175, 175, 175],
	\ [175, 175, 215],
	\ [175, 175, 255],
	\ [175, 215,   0],
	\ [175, 215,  95],
	\ [175, 215, 135],
	\ [175, 215, 175],
	\ [175, 215, 215],
	\ [175, 215, 255],
	\ [175, 255,   0],
	\ [175, 255,  95],
	\ [175, 255, 135],
	\ [175, 255, 175],
	\ [175, 255, 215],
	\ [175, 255, 255],
	\ [215,   0,   0],
	\ [215,   0,  95],
	\ [215,   0, 135],
	\ [215,   0, 175],
	\ [215,   0, 215],
	\ [215,   0, 255],
	\ [215,  95,   0],
	\ [215,  95,  95],
	\ [215,  95, 135],
	\ [215,  95, 175],
	\ [215,  95, 215],
	\ [215,  95, 255],
	\ [215, 135,   0],
	\ [215, 135,  95],
	\ [215, 135, 135],
	\ [215, 135, 175],
	\ [215, 135, 215],
	\ [215, 135, 255],
	\ [215, 175,   0],
	\ [215, 175,  95],
	\ [215, 175, 135],
	\ [215, 175, 175],
	\ [215, 175, 215],
	\ [215, 175, 255],
	\ [215, 215,   0],
	\ [215, 215,  95],
	\ [215, 215, 135],
	\ [215, 215, 175],
	\ [215, 215, 215],
	\ [215, 215, 255],
	\ [215, 255,   0],
	\ [215, 255,  95],
	\ [215, 255, 135],
	\ [215, 255, 175],
	\ [215, 255, 215],
	\ [215, 255, 255],
	\ [255,   0,   0],
	\ [255,   0,  95],
	\ [255,   0, 135],
	\ [255,   0, 175],
	\ [255,   0, 215],
	\ [255,   0, 255],
	\ [255,  95,   0],
	\ [255,  95,  95],
	\ [255,  95, 135],
	\ [255,  95, 175],
	\ [255,  95, 215],
	\ [255,  95, 255],
	\ [255, 135,   0],
	\ [255, 135,  95],
	\ [255, 135, 135],
	\ [255, 135, 175],
	\ [255, 135, 215],
	\ [255, 135, 255],
	\ [255, 175,   0],
	\ [255, 175,  95],
	\ [255, 175, 135],
	\ [255, 175, 175],
	\ [255, 175, 215],
	\ [255, 175, 255],
	\ [255, 215,   0],
	\ [255, 215,  95],
	\ [255, 215, 135],
	\ [255, 215, 175],
	\ [255, 215, 215],
	\ [255, 215, 255],
	\ [255, 255,   0],
	\ [255, 255,  95],
	\ [255, 255, 135],
	\ [255, 255, 175],
	\ [255, 255, 215],
	\ [255, 255, 255],
	\ [  8,   8,   8],
	\ [ 18,  18,  18],
	\ [ 28,  28,  28],
	\ [ 38,  38,  38],
	\ [ 48,  48,  48],
	\ [ 58,  58,  58],
	\ [ 68,  68,  68],
	\ [ 78,  78,  78],
	\ [ 88,  88,  88],
	\ [ 98,  98,  98],
	\ [108, 108, 108],
	\ [118, 118, 118],
	\ [128, 128, 128],
	\ [138, 138, 138],
	\ [148, 148, 148],
	\ [158, 158, 158],
	\ [168, 168, 168],
	\ [178, 178, 178],
	\ [188, 188, 188],
	\ [198, 198, 198],
	\ [208, 208, 208],
	\ [218, 218, 218],
	\ [228, 228, 228],
	\ [238, 238, 238]]

function RGB( r, g, b )
	if &termguicolors
		return '#' . printf("%02x%02x%02x", a:r, a:g, a:b)
	let vals = [ a:r, a:g, a:b ]
	let ind = index( g:cterm_color_table, vals )
	return ind
endfunc

function! s:HueToRGB(p, q, t) abort
	let l:p = a:p
	let l:q = a:q
	let l:t = a:t
	if l:t < 0
		let l:t = l:t + 1.0
	endif
	if l:t > 1
		let l:t = l:t - 1.0
	endif

	if l:t < 1.0 / 6.0
		return l:p + (l:q - l:p) * 6.0 * l:t
	endif
	if l:t < 1.0 / 2.0
		return l:q
	endif
	if l:t < 2.0 / 3.0
		return l:p + (l:q - l:p) * (2.0 / 3.0 - l:t) * 6.0
	endif
	return l:p
endfunction

function! s:HSLToRGB(hsl) abort
	let l:red = 0.0
	let l:green = 0.0
	let l:blue = 0.0

	let l:hue = a:hsl[0]
	let l:saturation = a:hsl[1]
	let l:lightness = a:hsl[2]

	if l:saturation == 0
		let l:red = l:lightness
		let l:green = l:lightness
		let l:blue = l:lightness
	else
		let l:q = l:lightness < 0.5 ? l:lightness * (1.0 + l:saturation) : l:lightness + l:saturation - l:lightness * l:saturation
		let l:p = 2.0 * l:lightness - l:q
		let l:_hue = l:hue + 1.0 / 3.0
		let l:red = s:HueToRGB(l:p, l:q, l:_hue)
		let l:green = s:HueToRGB(l:p, l:q, l:hue)
		let l:_hue = l:hue - 1.0 / 3.0
		let l:blue = s:HueToRGB(l:p, l:q, l:_hue)
	endif

	"return [l:red, l:green, l:blue]
	return RGB(l:red, l:green, l:blue)
endfunction
